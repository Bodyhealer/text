{
	"name": "Conversion Tests",
	"scale": {
		"type": "relative",
		"to": "base"
	},
	"categories": [
		{
			"name": "UTF-16 to UTF-32 (Well-Formed)",
			"pattern": "utf16_to_utf32_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-16 data to UTF-32 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-16 to UTF-8 (Well-Formed)",
			"pattern": "utf16_to_utf8_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-16 data to UTF-8 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-8 to UTF-16 (Well-Formed)",
			"pattern": "utf8_to_utf16_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-8 data to UTF-16 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-8 to UTF-32 (Well-Formed)",
			"pattern": "utf8_to_utf32_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-8 data to UTF-32 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-32 to UTF-8 (Well-Formed)",
			"pattern": "utf32_to_utf8_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-32 data to UTF-8 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-32 to UTF-16 (Well-Formed)",
			"pattern": "utf32_to_utf16_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-32 data to UTF-16 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-16 to UTF-32 (Well-Formed, Unchecked)",
			"pattern": "utf16_to_utf32_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-16 data to UTF-32 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-16 to UTF-8 (Well-Formed, Unchecked)",
			"pattern": "utf16_to_utf8_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-16 data to UTF-8 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-8 to UTF-16 (Well-Formed, Unchecked)",
			"pattern": "utf8_to_utf16_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-8 data to UTF-16 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-8 to UTF-32 (Well-Formed, Unchecked)",
			"pattern": "utf8_to_utf32_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-8 data to UTF-32 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-32 to UTF-8 (Well-Formed, Unchecked)",
			"pattern": "utf32_to_utf8_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-32 data to UTF-8 data that contains no ill-formed or incomplete sequences."
		},
		{
			"name": "UTF-32 to UTF-16 (Well-Formed, Unchecked)",
			"pattern": "utf32_to_utf16_unchecked_well_formed_",
			"ascending": false,
			"description": "A conversion from UTF-32 data to UTF-16 data that contains no ill-formed or incomplete sequences."
		}
	],
	"data_groups": [
		{
			"name": "boost.text",
			"pattern": "boost_text$",
			"description": "Measures the boost.text library from Zach Laine and its encoding routines, particularly the all-at-once bulk routines."
		},
		{
			"name": "boost.text view",
			"pattern": "boost_text_view$",
			"description": "Measures the boost.text library from Zach laine and its encoding routines, partocularly the one-at-a-time views that can be fed into C and C++ algorithms using the view's iterator abstraction."
		},
		{
			"name": "cuneicode registry (unbounded)",
			"pattern": "cuneicode_registry_unbounded$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the non-typed conversion routines from its Conversion Registry abstraction with specific conversion pathways overridden (without providing an output size)."
		},
		{
			"name": "cuneicode registry",
			"pattern": "cuneicode_registry$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the non-typed conversion routines from its Conversion Registry abstraction with all defaults left alone."
		},
		{
			"name": "cuneicode",
			"pattern": "cuneicode$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the typed, non-generic C-style encoding routines."
		},
		{
			"name": "cuneicode (unbounded)",
			"pattern": "cuneicode_unbounded$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the typed, non-generic C-style encoding routines (without providing an output size)."
		},
		{
			"name": "cuneicode (single loop)",
			"pattern": "cuneicode_single$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the typed, non-generic C-style encoding routines that use the \"indivisable unit fo conversion\" functions."
		},
		{
			"name": "cuneicode (single loop, unbounded)",
			"pattern": "cuneicode_single_unbounded$",
			"description": "Measures the ztd.cuneicode library from Shepherd's Oasis and its encoding routines, particularly the typed, non-generic C-style encoding routines \"indivisable unit fo conversion\" functions (without providing an output size)."
		},
		{
			"name": "libiconv",
			"pattern": "iconv$",
			"description": "Measures the libiconv (GNU version) encoding library, using its POSIX-compliant function call \"iconv\"."
		},
		{
			"name": "simdutf",
			"pattern": "simdutf$",
			"description": "Measures the performance of Daniel Lemire's simdutf library, which is meant to be highly optimized and performant under all unicode workloads."
		},
		{
			"name": "Rust's encoding_c",
			"pattern": "encoding_c$",
			"description": "Measures the performance of the Rust encoding_rs library, called through its C bindings encoding_c directly (typically statically linked in to achieve the same optimization potential). Used in the Gecko web engine."
		},
		{
			"name": "ctre",
			"pattern": "ctre$",
			"description": "Measures the performance of the Compile-Time Regular Expression (CTRE) library's internal encoding conversion routines."
		},
		{
			"name": "utf8cpp",
			"pattern": "utf8cpp$",
			"description": "Measures the utf8cpp library and its conversion routines."
		},
		{
			"name": "ICU (2 UConverter convertEx)",
			"pattern": "icu_ucnv_convertEx$",
			"description": "Measures the ICU library and its conversion routines when routed through 2 generic \"UConverter\" converter objects."
		},
		{
			"name": "ICU (u_strFromUTF8)",
			"pattern": "icu_u_strFromUTF8$",
			"description": "Measures the ICU library conversion routine using the specific u_strFromUTF8 function."
		},
		{
			"name": "ICU (ucnv_toUChars)",
			"pattern": "icu_ucnv_toUChars$",
			"description": "Measures the ICU library conversion routine using the specific ucnv_toUChars function."
		},
		{
			"name": "ICU (u_strToUTF8)",
			"pattern": "icu_u_strToUTF8$",
			"description": "Measures the ICU library conversion routine using the specific u_strToUTF8 function."
		},
		{
			"name": "ICU (UnicodeString_toUTF8)",
			"pattern": "icu_UnicodeString_toUTF8$",
			"description": "Measures the ICU library conversion routine using the specific UnicodeString_toUTF8 function."
		},
		{
			"name": "ICU (ucnv_fromUChars)",
			"pattern": "icu_ucnv_fromUChars$",
			"description": "Measures the ICU library conversion routine using the specific ucnv_fromUChars function."
		},
		{
			"name": "ICU (u_strFromUTF32)",
			"pattern": "u_strFromUTF32$",
			"description": "Measures the ICU library conversion routine using the specific u_strFromUTF32 function."
		},
		{
			"name": "ztd.text",
			"pattern": "_ztd_text$",
			"description": "Measures the ztd.text library conversion routine using the ztd::text::transcode function."
		},
		{
			"name": "ztd.text (unbounded)",
			"pattern": "_ztd_text_unbounded$",
			"description": "Measures the ztd.text library conversion routine using the ztd::text::transcode function."
		},
		{
			"name": "ztd.text (single loop)",
			"pattern": "_ztd_text_single$",
			"description": "Measures the ztd.text library conversion routine using the ztd::text::transcode function."
		},
		{
			"name": "ztd.text (single loop, unbounded)",
			"pattern": "_ztd_text_single_unbounded$",
			"description": "Measures the ztd.text library conversion routine using the ztd::text::transcode function."
		}
	],
	"data_labels": [
		{
			"name": "real time",
			"id": "real_time",
			"format": "clock",
			"primary": true,
			"description": "The amount of elapsed time in the real world; also known as \"wall clock\" time."
		},
		{
			"name": "cpu time",
			"id": "cpu_time",
			"format": "clock",
			"description": "The amount of elapsed time if work done was laid out in linear time and did not have concurrency, parallelization, or multithreading in use."
		}
	],
	"remove_suffixes": [
		",",
		"_"
	],
	"remove_prefixes": [
		",",
		"_"
	],
	"sources": [
		{
			"file": "benchmarks.json",
			"required": false
		}
	]
}
